name: Build Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build Release (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: goldentooth-mcp-x86_64-linux
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: goldentooth-mcp-aarch64-linux
          - target: x86_64-apple-darwin
            os: macos-latest
            name: goldentooth-mcp-x86_64-macos
          - target: aarch64-apple-darwin
            os: macos-latest
            name: goldentooth-mcp-aarch64-macos

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: 1.85.0
        targets: ${{ matrix.target }}
        components: clippy

    - name: Install cross-compilation dependencies (Linux)
      if: matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}

    - name: Run tests
      if: matrix.target == 'x86_64-unknown-linux-gnu'
      run: cargo test --verbose

    - name: Run clippy
      if: matrix.target == 'x86_64-unknown-linux-gnu'
      run: cargo clippy --target ${{ matrix.target }} -- -D warnings

    - name: Build release binary
      run: |
        if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
          export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
        fi
        cargo build --release --target ${{ matrix.target }} --verbose

    - name: Prepare artifacts
      run: |
        mkdir -p artifacts
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cp target/${{ matrix.target }}/release/goldentooth-mcp.exe artifacts/${{ matrix.name }}.exe
        else
          cp target/${{ matrix.target }}/release/goldentooth-mcp artifacts/${{ matrix.name }}
        fi
        # Copy systemd service file only for x86_64 Linux target to avoid duplicates
        if [ "${{ matrix.target }}" = "x86_64-unknown-linux-gnu" ]; then
          cp goldentooth-mcp.service artifacts/
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: artifacts/
        retention-days: 30

  create-release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    # Create release only for version bump commits
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && contains(github.event.head_commit.message, '[version bump]')

    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts

    - name: Get version from Cargo.toml
      id: version
      run: |
        VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$VERSION" >> $GITHUB_OUTPUT

    - name: Check if release exists
      id: check_release
      run: |
        if gh release view ${{ steps.version.outputs.tag }} >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create release
      if: steps.check_release.outputs.exists == 'false'
      run: |
        gh release create ${{ steps.version.outputs.tag }} \
          --title "Release ${{ steps.version.outputs.version }}" \
          --notes "Automated release of goldentooth-mcp ${{ steps.version.outputs.version }}" \
          --latest \
          release-artifacts/*/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
